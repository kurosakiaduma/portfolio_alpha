user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_min_length 1024;
    gzip_comp_level 4;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # Default server to serve static files from nginx container (used in docker build)
    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        root   /usr/share/nginx/html;
        index  index.html;

        # Handle static assets (CSS, JS, images, etc.) - serve directly, no fallback
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }

        # Handle API routes (return 404 for missing API endpoints)
        location /api/ {
            return 404;
        }

        # Handle all other routes (SPA routing)
        location / {
            try_files $uri $uri/ @fallback;
        }

        # Fallback for SPA routing
        location @fallback {
            rewrite ^.*$ /index.html last;
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Additional server block for production reverse-proxy (example)
    server {
        listen 8080;
        server_name taduma.me www.taduma.me;

        access_log /var/log/nginx/portfolio_access.log;
        error_log /var/log/nginx/portfolio_error.log;

        location / {
            proxy_pass http://localhost:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        location /api/ {
            return 503 "API not yet available";
            add_header Content-Type text/plain;
        }
    }
}